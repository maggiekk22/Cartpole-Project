// --------------------------------------------------
// Libraries
// --------------------------------------------------
#include <Encoder.h>
#include <AccelStepper.h>
#include <elapsedMillis.h>
#include <math.h>

// --------------------------------------------------
// Pin Definitions
// --------------------------------------------------
#define STEP_PIN 9
#define DIR_PIN 10
#define ENCODER_PIN_A A1
#define ENCODER_PIN_B A2

// --------------------------------------------------
// Stepper + Encoder Setup
// --------------------------------------------------
Encoder myEnc(ENCODER_PIN_A, ENCODER_PIN_B);
long encoderPosition = 0;

#define STEPPER_INTERFACE AccelStepper::DRIVER
AccelStepper stepper(STEPPER_INTERFACE, STEP_PIN, DIR_PIN);

// --------------------------------------------------
// Data Storage
// --------------------------------------------------
elapsedMillis timeElapsed_ms;
const int maxSamples = 1000;
float timeArray[maxSamples];
float angleArray[maxSamples];
int sample_count = 0;
bool recording = false;

// --------------------------------------------------
// Setup
// --------------------------------------------------
void setup() {
  pinMode(STEP_PIN, OUTPUT);
  pinMode(DIR_PIN, OUTPUT);
  Serial.begin(9600);

  stepper.setMaxSpeed(7400);
  stepper.setAcceleration(600);

  Serial.println("System Ready. Commands:");
  Serial.println(" r <steps> : move right and record motion");
  Serial.println(" l <steps> : move left and record motion");
  Serial.println(" D : dump recorded encoder data");
  Serial.println(" C : clear data arrays");
  Serial.println(" H : help");
}

// --------------------------------------------------
// Loop
// --------------------------------------------------
void loop() {
  if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n');
    cmd.trim();

    if (cmd.startsWith("r ")) {
      int steps = cmd.substring(2).toInt();
      moveCartAndRecord(steps, true);
    }
    else if (cmd.startsWith("l ")) {
      int steps = cmd.substring(2).toInt();
      moveCartAndRecord(steps, false);
    }
    else if (cmd == "D") {
      dumpData();
    }
    else if (cmd == "C") {
      sample_count = 0;
      Serial.println("Data arrays cleared.");
    }
    else if (cmd == "H") {
      Serial.println("Available commands:");
      Serial.println(" r <steps> : move right and record motion");
      Serial.println(" l <steps> : move left and record motion");
      Serial.println(" D : dump recorded encoder data");
      Serial.println(" C : clear data arrays");
      Serial.println(" H : display help");
    }
    else {
      Serial.println("Unknown command. Type 'H' for help.");
    }
  }

  // Record ongoing oscillation (if active)
  if (recording && sample_count < maxSamples) {
    timeArray[sample_count] = timeElapsed_ms;
    long rawEncoder = myEnc.read();
    angleArray[sample_count] = (rawEncoder * 360.0) / 600.0; // 600 PPR encoder
    sample_count++;
    delay(10); // sampling interval (10ms)
  }
}

// --------------------------------------------------
// Move and Record Motion
// --------------------------------------------------
void moveCartAndRecord(int steps, bool right) {
  stepper.setCurrentPosition(0);
  stepper.moveTo(right ? steps : -steps);

  // Reset and start recording
  sample_count = 0;
  timeElapsed_ms = 0;
  recording = true;
  Serial.println("Recording started...");

  // Move stepper (kick the pendulum)
  while (stepper.distanceToGo() != 0) {
    stepper.run();
  }

  // Continue recording after motion for extra time (e.g., pendulum oscillation)
  unsigned long recordDuration = 5000; // ms
  unsigned long start = millis();
  while (millis() - start < recordDuration && sample_count < maxSamples) {
    timeArray[sample_count] = timeElapsed_ms;
    long rawEncoder = myEnc.read();
    angleArray[sample_count] = (rawEncoder * 360.0) / 600.0;
    sample_count++;
    delay(10);
  }

  recording = false;
  Serial.println("Recording stopped.");
  Serial.print("Samples collected: ");
  Serial.println(sample_count);
}

// --------------------------------------------------
// Dump Recorded Data
// --------------------------------------------------
void dumpData() {
  Serial.println("time_ms,encoder_angle_deg");
  for (int i = 0; i < sample_count; i++) {
    Serial.print(timeArray[i], 2);
    Serial.print(",");
    Serial.println(angleArray[i], 3);
  }
  Serial.println("Done.");
}
