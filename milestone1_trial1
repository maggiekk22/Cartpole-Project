#define STEP_PIN 9
#define DIR_PIN 10

void setup() {
  pinMode(STEP_PIN, OUTPUT);
  pinMode(DIR_PIN, OUTPUT);
  Serial.begin(9600);  // For serial command input
}

void loop() {
  if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n'); // read entire line
    cmd.trim(); // remove spaces/newline

    if (cmd.startsWith("r ")) {
      int steps = cmd.substring(2).toInt(); // extract number after "r "
      moveCart(steps, true);
    } 
    else if (cmd.startsWith("l ")) {
      int steps = cmd.substring(2).toInt(); // extract number after "l "
      moveCart(steps, false);
    }
  }
}

#include <Encoder.h>

// Define encoder pins
#define ENCODER_PIN_A A1
#define ENCODER_PIN_B A2

Encoder myEnc(ENCODER_PIN_A, ENCODER_PIN_B);
long encoderPosition = 0;

#include <AccelStepper.h>

// Define AccelStepper interface type
#define STEPPER_INTERFACE AccelStepper::DRIVER

AccelStepper stepper(STEPPER_INTERFACE, STEP_PIN, DIR_PIN);

void moveCart(int steps, bool right) {
  stepper.setMaxSpeed(100000); // steps per second, maximum speed
  stepper.setAcceleration(1000); // steps per second^2, set acceleration
  stepper.setCurrentPosition(0);
  stepper.moveTo(right ? steps : -steps);

  // Print CSV header
  Serial.println("time_ms,position_steps,encoder_angle_deg,velocity_steps_per_s");

  unsigned long startTime = millis();
  long lastPosition = stepper.currentPosition();
  unsigned long lastTime = millis();

  float lastVelocity = 0;
  while (stepper.distanceToGo() != 0) {
    stepper.run();

    // Record encoder position and angle
    encoderPosition = myEnc.read();
    float angle = (encoderPosition * 360.0) / 600.0; // 600 pulses per revolution
    unsigned long currentTime = millis() - startTime;

    // Calculate velocity in steps per second
    long currentPosition = stepper.currentPosition();
    unsigned long now = millis();
    float velocity = 0;
    float acceleration = 0;
    unsigned long dt = now - lastTime;
    if (dt > 0) {
      velocity = (currentPosition - lastPosition) * 1000.0 / dt;
      acceleration = (velocity - lastVelocity) * 1000.0 / dt;
    }

    // Output CSV row: time in ms, position in steps, angle in degrees, velocity in steps/s, acceleration in steps/s^2
    Serial.print(currentTime);
    Serial.print(", ");
    Serial.print(currentPosition);
    Serial.print(", ");
    Serial.print(angle);
    Serial.print(", ");
    Serial.print(velocity);
    Serial.print(", ");
    Serial.println(acceleration);

    lastPosition = currentPosition;
    lastTime = now;
    lastVelocity = velocity;
  }
}
