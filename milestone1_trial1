// -----------------------------
// Pins
// -----------------------------
#define STEP_PIN 9
#define DIR_PIN 10
#define ENCODER_PIN_A A1
#define ENCODER_PIN_B A2

// -----------------------------
// Libraries
// -----------------------------
#include <Encoder.h>
#include <AccelStepper.h>

// -----------------------------
// Globals
// -----------------------------
Encoder myEnc(ENCODER_PIN_A, ENCODER_PIN_B);
long encoderPosition = 0;

#define STEPPER_INTERFACE AccelStepper::DRIVER
AccelStepper stepper(STEPPER_INTERFACE, STEP_PIN, DIR_PIN);

// -----------------------------
// Setup
// -----------------------------
void setup() {
  pinMode(STEP_PIN, OUTPUT);
  pinMode(DIR_PIN, OUTPUT);
  Serial.begin(9600);

  // Default motion limits
  stepper.setMaxSpeed(1000);     // steps/s
  stepper.setAcceleration(200);  // steps/s^2

  Serial.println("Ready. Commands:");
  Serial.println(" r <steps> : move right");
  Serial.println(" l <steps> : move left");
}

// -----------------------------
// Loop
// -----------------------------
void loop() {
  if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n'); // read entire line
    cmd.trim();

    if (cmd.startsWith("r ")) {
      int steps = cmd.substring(2).toInt();
      moveCart(steps, true);
    } 
    else if (cmd.startsWith("l ")) {
      int steps = cmd.substring(2).toInt();
      moveCart(steps, false);
    }
  }
}

// -----------------------------
// Motion Function
// -----------------------------
void moveCart(int steps, bool right) {
  stepper.setCurrentPosition(0);
  stepper.moveTo(right ? steps : -steps);

  // CSV header
  Serial.println("time_ms,position_steps,encoder_angle_deg,velocity_steps_per_s,acceleration_steps_per_s2");

  unsigned long startTime = millis();
  long lastPosition = stepper.currentPosition();
  unsigned long lastTime = millis();
  float lastVelocity = 0;

  while (stepper.distanceToGo() != 0) {
    stepper.run();

    // Encoder
    encoderPosition = myEnc.read();
    float angle = (encoderPosition * 360.0) / 600.0; // 600 PPR encoder
    unsigned long currentTime = millis() - startTime;

    // Calculate velocity/acceleration with smoothing (every 20 ms)
    long currentPosition = stepper.currentPosition();
    unsigned long now = millis();
    float velocity = lastVelocity;
    float acceleration = 0;
    unsigned long dt = now - lastTime;

    if (dt >= 1) {  // update every 20ms
      velocity = (currentPosition - lastPosition) * 1000.0 / dt;
      acceleration = (velocity - lastVelocity) * 1000.0 / dt;

      lastPosition = currentPosition;
      lastTime = now;
      lastVelocity = velocity;
    }

    // Output CSV
    Serial.print(currentTime);
    Serial.print(", ");
    Serial.print(currentPosition);
    Serial.print(", ");
    Serial.print(angle);
    Serial.print(", ");
    Serial.print(velocity);
    Serial.print(", ");
    Serial.println(acceleration);
  }
}
